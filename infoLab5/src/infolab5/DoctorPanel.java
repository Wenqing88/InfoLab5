package infolab5;

import static java.awt.image.ImageObserver.HEIGHT;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Address;
import model.Community;
import model.Doctor;
import model.DoctorDirectory;
import model.Hospital;
import model.HospitalDirectory;
import model.MedicalSystem;
import model.Patient;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author User
 */
public class DoctorPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorPanel
     */
    public DoctorPanel() {
        initComponents();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tittleLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        doctorTable = new javax.swing.JTable();
        nameLabel = new javax.swing.JLabel();
        phoneNumLabel = new javax.swing.JLabel();
        doctorIDLabel = new javax.swing.JLabel();
        hospitalLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        phoneNumField = new javax.swing.JTextField();
        hospitalField = new javax.swing.JTextField();
        idDisplayLabel = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();

        tittleLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        tittleLabel.setText("Doctor Info");

        doctorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "PhoneNumber", "DoctorID", "Hospital"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(doctorTable);

        nameLabel.setText("Name");

        phoneNumLabel.setText("Phone Number");

        doctorIDLabel.setText("DoctorID");

        hospitalLabel.setText("Hospital");

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        hospitalField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalFieldActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tittleLabel)
                .addGap(306, 306, 306))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(deleteButton)
                        .addGap(104, 104, 104)
                        .addComponent(addButton)
                        .addGap(115, 115, 115)
                        .addComponent(updateButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLabel)
                            .addComponent(phoneNumLabel)
                            .addComponent(hospitalLabel)
                            .addComponent(doctorIDLabel))
                        .addGap(87, 87, 87)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(hospitalField)
                            .addComponent(phoneNumField)
                            .addComponent(nameField)
                            .addComponent(idDisplayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(94, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(tittleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(addButton)
                    .addComponent(updateButton))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctorIDLabel)
                    .addComponent(idDisplayLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneNumLabel)
                    .addComponent(phoneNumField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hospitalLabel)
                    .addComponent(hospitalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(313, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void hospitalFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hospitalFieldActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        Doctor doctor = new Doctor();
        try {
            doctor.setPhoneNumber(Long.parseLong(phoneNumField.getText()));
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(this, "Phone number should be in numbers only!",
                    "Invalid Input", HEIGHT);
        }

        doctor.setName(nameField.getText());
        for (Hospital h : HospitalDirectory.getInstance().getHospitals()) {
            // might need to determine the hospital by community and city
            if (hospitalField.getText() == null ? h.getName() == null : hospitalField.getText().equals(h.getName())) {
                doctor.setHospital(h);
            }
        }
        if(doctor.getHospital() == null){
            JOptionPane.showMessageDialog(this, "Can't find the hospital!",
                        "Invalid Input", HEIGHT);
            return;
        }
        DoctorDirectory.getInstance().addDoctor(doctor);
        JOptionPane.showMessageDialog(this, "Patient Information is updated successfully.");
        populateTable();
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        int selectedIndex = doctorTable.getSelectedRow();
        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to be deleted", "Error - No selection", JOptionPane.WARNING_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
            Doctor selectedDoctor = (Doctor) model.getValueAt(selectedIndex, 0);
            DoctorDirectory.getInstance().removeDoctor(selectedDoctor);
            JOptionPane.showMessageDialog(this, "Doctor Information is deleted successfully.");
            populateTable();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        Doctor selectedDoctor;
        int selectedIndex = doctorTable.getSelectedRow();
        if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to be updated", "Error - No selection", JOptionPane.WARNING_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
            selectedDoctor = (Doctor) model.getValueAt(selectedIndex, 0);
            try{
                selectedDoctor.setPhoneNumber(Long.parseLong(phoneNumField.getText()));
            } catch(NumberFormatException nfe){
                JOptionPane.showMessageDialog(this, "Phone number should be in numbers only!",
                        "Invalid Input", HEIGHT);
            }
            
            selectedDoctor.setName(nameField.getText());
            for(Hospital h : HospitalDirectory.getInstance().getHospitals()){
                // might need to determine the hospital by community and city
                if(hospitalField.getText() == null ? h.getName() == null : hospitalField.getText().equals(h.getName())){
                    selectedDoctor.setHospital(h);
                }
            }

            if(selectedDoctor.getHospital() == null){
                JOptionPane.showMessageDialog(this, "Can't find the hospital!",
                            "Invalid Input", HEIGHT);
                return;
            }
            DoctorDirectory.getInstance().addDoctor(selectedDoctor);
            JOptionPane.showMessageDialog(this, "Patient Information is updated successfully.");
            populateTable();
        }
    }//GEN-LAST:event_updateButtonActionPerformed


    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) doctorTable.getModel();
        model.setRowCount(0);
        for (Doctor d : DoctorDirectory.getInstance().getAllDoctors()) {
            Object[] row = new Object[4];
            row[0] = d;
            row[1] = d.getPhoneNumber();
            row[2] = d.getID();
            row[3] = d.getHospital();
            model.addRow(row);
        }
        clearFields();
    }
    
    private void clearFields() {
        hospitalField.setText("");
        nameField.setText("");
        idDisplayLabel.setText("");
        phoneNumField.setText("");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel doctorIDLabel;
    private javax.swing.JTable doctorTable;
    private javax.swing.JTextField hospitalField;
    private javax.swing.JLabel hospitalLabel;
    private javax.swing.JLabel idDisplayLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField phoneNumField;
    private javax.swing.JLabel phoneNumLabel;
    private javax.swing.JLabel tittleLabel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
